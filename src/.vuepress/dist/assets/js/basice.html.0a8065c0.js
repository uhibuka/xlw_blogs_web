"use strict";(self.webpackChunkblogs_web=self.webpackChunkblogs_web||[]).push([[165],{7708:(t,e)=>{e.A=(t,e)=>{const i=t.__vccOpts||t;for(const[t,l]of e)i[t]=l;return i}},908:(t,e,i)=>{i.r(e),i.d(e,{comp:()=>s,data:()=>r});var l=i(4754);const a=[(0,l.Fv)('<details class="hint-container details"><summary>1.基本类型和包装类型的区别？</summary><p><strong>相同点</strong> ：都可以用作变量，无论是方法传递的参数还是成员变量。</p><p><strong>不同点</strong> ：一个是基础数据类型，一个是引用数据类型</p><ul><li>两者在比较的时候方式不同；</li><li>储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）；</li><li>所占空间大小不同；</li><li>初始化的默认值也不同；</li></ul><p>包装类的自动拆装箱：从字节码中，我们发现装箱其实就是调用了包装类的<code>valueof()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p></details><details class="hint-container details"><summary>2.包装类的缓存机制</summary><ul><li>Integer： -128~127（包括Long，Short，Byte）</li><li>Boolean： true/false</li><li>Character： 0~127</li><li>两种浮点数类型的包装类<code>Float</code>，<code>Double</code>并没有实现缓存机制。</li></ul></details><details class="hint-container details"><summary>3.成员变量和局部变量的区别？</summary><ul><li><strong>位置区别</strong> ：成员变量在类里面与方法同级；局部变量在方法内部</li></ul><blockquote><p>成员变量可以被<code>public</code>，<code>private</code>，<code>static</code>等修饰符修饰，而局部变量不能被访问控制修饰符，以及static等修饰符所修饰，但是成员变量和局部变量都能够被<code>final</code>修饰</p></blockquote><ul><li><strong>存储方式</strong>：从变量在内存中的存储方式来看，如果成员变量使用<code>static</code>修饰，那么这个成员变量属于类，位于方法区，如果没有，那么这个变量就是属于实例的，存放在堆内存。局部变量则存在于栈内存的局部变量表。</li><li><strong>默认值</strong>：成员变量如果没有被赋初始值，就会以类型的默认值而赋值（被final修饰的的成员变量必须显式的地赋值），而局部变量不会自动赋值。</li><li><strong>生存时间</strong>：成员变量是对象地一部分，随着对象地创建而存在，而局部变量是随着方法地调用而自动生成，随着方法调用结束而消亡。</li></ul></details><details class="hint-container details"><summary>### 4.静态变量有什么作用？</summary><p><code>static</code>的主要作用是使成员变量或方法与类关联，而不是与类的实例关联</p><ul><li>这意味着他们可以在没有创建类实力的情况下被访问和调用。同时，静态成员变量也可以被所有该类的实例共享，可以用于存储类级别的信息，比如计数器，常量等。</li><li>静态变量只会被分配一次内存，即使创建多个对象，他们都共享一份静态变量，这样可以节省内存。</li><li>可以通过类名访问，可以搭配<code>final</code>关键字做常量。</li></ul></details><details class="hint-container details"><summary>### 5.字符型常量和字符串常量的区别？</summary><ul><li><p>形式：字符常量是单引号引起的一个字符，字符串常量是双引号引起的0个或若干个字符。</p></li><li><p>含义：字符常量相当于一个整型值（ASCII 值），可以参加表达式运算；字符常量代表一个地址值（该字符串在内存中存放位置）。</p></li><li><p>占内存大小：字符常量只占两个字节；字符串常量占若干个字节。</p><p><strong>注意 <code>char</code>在Java中占两个字节</strong></p></li></ul><details class="hint-container details"><summary>### 6.静态方法为什么不能调用非静态成员？</summary><p>需结合JVM相关知识，主要原因如下：</p><ol><li>静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有对象实例化之后才存在，需要通过类的实例对象去访问。</li><li>在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员变量，属于非法操作。</li></ol></details></details><details class="hint-container details"><summary>### 7.静态方法和实例方法有何不同？</summary><ol><li>形式：静态方法-static修饰，是属于类的，每个类就一份，在类加载的时候会分配内存，可以通过类名直接访问，实例方法需要创建对应的实例对象才能调用，多个实例对象都有各自的实例方法。</li><li>调用方式：静态方法-类名点进行调用，实例方法需要创建实例对象，然后实例对象点进行调用。</li><li>访问限制的区别：静态只能调用静态，实例都可以调用。</li><li>生命周期：静态方法的生命周期和类相关，而实例方法与对应实例相关。</li></ol></details><details class="hint-container details"><summary>### 8.重载和重写的区别？</summary><p>共同点：</p><ol><li>都涉及方法：可以在类中定义多个方法，他们的方法名相同但是参数列表不同。</li><li>都是多态的体现：多态是指同一个方法名可以在同一个类的不同方法或者不同的类中以不同的方式实现。</li></ol><ul><li>重载一个类可以有多个同名方法。</li><li>重写就是子类对父类方法重新改造，外部样子不能改变，内部逻辑可以改变。</li></ul><p>不同点：</p><ol><li>适用范围不同： <ul><li>重载（Overloading）指的是在同一个类中定义多个方法，他们的方法名相同，但是参数列表不同。</li><li>重写（Overriding）指的是子类可以定义与父类中同名、同参数列表的方法，用于覆盖父类中的方法，重写只发生在子类覆盖父类的方法情况。</li></ul></li><li>方法签名： <ul><li>对于重载，方法名相同但是参数列表必须不同（参数类型，顺序，个数）</li><li>对于重写，方法名、参数列表必须相同，返回类型可以是子类的类型或者其子类型。</li></ul></li><li>返回类型 <ul><li>对于重载，返回类型可以相同也可以不同，但是方法的参数列表必须不同。</li><li>对于重写，返回类型必须相同或是其子类</li></ul></li><li>运行时行为 <ul><li>对于重载，方法调用的解析在编译时发生，根据传入的参数类型来决定调用哪个方法。</li><li>对于重写，方法的调用在运行时通过动态分派发生，根据实际对象的类型来决定调用哪个方法。</li></ul></li></ol></details><details class="hint-container details"><summary>### 9.面向对象和面向过程的区别？</summary><ul><li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法执行解决问题</li><li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题</li><li>面向对象由于封装、继承、多态三大特征的原因，更易维护、易复用。但是因其要实例化对象，对性能的开销比较大。</li></ul></details><details class="hint-container details"><summary>### 10.面向对象三大特征</summary><p><strong>封装、继承、多态</strong>：</p><ul><li>封装：把成员变量和具体的方法封装到一个具体的类中，以后的编码无需关系对象内部问题，只面对这个对象本身。</li><li>继承：核心目的就是代码复用，通过继承，子类可以复用父类的方法，并可以通过super关键字直接调用，也能重写父类的方法，形成多态。可以通过组合的方式，降低耦合，实现更好的封装</li><li>多态：表示一个对象具有多种状态。（有继承（接口、抽象类、类）、有重写、父类引用指向子类对象）。</li></ul><details class="hint-container details"><summary>### 11.接口和抽象类的区别？</summary><p>共同点：</p><ul><li>接口和抽象类都不能被实例化。</li><li>接口和抽象类都可以包含抽象方法，没有方法体的方法。</li><li>接口和抽象类都可以由默认实现的方法</li></ul><p>不同点：</p><ul><li>抽象类是一个类使用 abstract class，并且抽象方法需要使用abstract修饰，而接口使用interface修饰，接口的抽象方法默认就是抽象，不需要添加abstract。</li><li>抽象类可以继承一个类，也可以实现一个接口，但是只能继承一个，但是能够实现多个。而接口只能继承，但是可以继承多个。</li><li>抽象类可以有构造器，而接口没有。</li><li>接口主要是用以对类的行为进行约束，实现了某个接口，就具有了对应的行为。抽象类主要用于代码复用，强调的数所属关系。</li></ul></details></details><details class="hint-container details"><summary>### 12.深拷贝和浅拷贝的区别是什么？什么是引用拷贝？</summary><ul><li>深拷贝：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象，得到的是一个全新的对象。</li><li>浅拷贝：浅拷贝会在堆上创建一个新的对象，只拷贝当前对象，如果当前对象的内部是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也即是说拷贝对象和原对象共用一个内部对象。</li><li>引用拷贝：简单来说，引用拷贝就是两个不同的引用指向同一个对象</li><li>:::</li></ul></details>',10)],o={},s=(0,i(7708).A)(o,[["render",function(t,e){return(0,l.uX)(),(0,l.CE)("div",null,a)}]]),r=JSON.parse('{"path":"/guide/Java/basice.html","title":"Java Basice","lang":"en-US","frontmatter":{"title":"Java Basice","icon":"fab fa-markdown","order":2,"category":["使用指南"],"tag":["Markdown"],"description":"1.基本类型和包装类型的区别？ 相同点 ：都可以用作变量，无论是方法传递的参数还是成员变量。 不同点 ：一个是基础数据类型，一个是引用数据类型 两者在比较的时候方式不同； 储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）； 所...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/guide/Java/basice.html"}],["meta",{"property":"og:site_name","content":"Knowledge is infinite."}],["meta",{"property":"og:title","content":"Java Basice"}],["meta",{"property":"og:description","content":"1.基本类型和包装类型的区别？ 相同点 ：都可以用作变量，无论是方法传递的参数还是成员变量。 不同点 ：一个是基础数据类型，一个是引用数据类型 两者在比较的时候方式不同； 储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）； 所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-03-29T07:25:57.000Z"}],["meta",{"property":"article:author","content":"RenTouZhuNao"}],["meta",{"property":"article:tag","content":"Markdown"}],["meta",{"property":"article:modified_time","content":"2024-03-29T07:25:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java Basice\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-29T07:25:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RenTouZhuNao\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1711697157000,"updatedTime":1711697157000,"contributors":[{"name":"uhibuka","email":"2580874889@qq.com","commits":1}]},"readingTime":{"minutes":7.74,"words":2321},"filePathRelative":"guide/Java/basice.md","localizedDate":"March 29, 2024","autoDesc":true}')},1198:(t,e,i)=>{i.r(e),i.d(e,{comp:()=>s,data:()=>r});var l=i(4754);const a=[(0,l.Fv)('<details class="hint-container details"><summary>1.基本类型和包装类型的区别？</summary><p><strong>相同点</strong> ：都可以用作变量，无论是方法传递的参数还是成员变量。</p><p><strong>不同点</strong> ：一个是基础数据类型，一个是引用数据类型</p><ul><li>两者在比较的时候方式不同；</li><li>储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）；</li><li>所占空间大小不同；</li><li>初始化的默认值也不同；</li></ul><p>包装类的自动拆装箱：从字节码中，我们发现装箱其实就是调用了包装类的<code>valueof()</code>方法，拆箱其实就是调用了 <code>xxxValue()</code>方法。</p></details><details class="hint-container details"><summary>2.包装类的缓存机制</summary><ul><li>Integer： -128~127（包括Long，Short，Byte）</li><li>Boolean： true/false</li><li>Character： 0~127</li><li>两种浮点数类型的包装类<code>Float</code>，<code>Double</code>并没有实现缓存机制。</li></ul></details><details class="hint-container details"><summary>3.成员变量和局部变量的区别？</summary><ul><li><strong>位置区别</strong> ：成员变量在类里面与方法同级；局部变量在方法内部</li></ul><blockquote><p>成员变量可以被<code>public</code>，<code>private</code>，<code>static</code>等修饰符修饰，而局部变量不能被访问控制修饰符，以及static等修饰符所修饰，但是成员变量和局部变量都能够被<code>final</code>修饰</p></blockquote><ul><li><strong>存储方式</strong>：从变量在内存中的存储方式来看，如果成员变量使用<code>static</code>修饰，那么这个成员变量属于类，位于方法区，如果没有，那么这个变量就是属于实例的，存放在堆内存。局部变量则存在于栈内存的局部变量表。</li><li><strong>默认值</strong>：成员变量如果没有被赋初始值，就会以类型的默认值而赋值（被final修饰的的成员变量必须显式的地赋值），而局部变量不会自动赋值。</li><li><strong>生存时间</strong>：成员变量是对象地一部分，随着对象地创建而存在，而局部变量是随着方法地调用而自动生成，随着方法调用结束而消亡。</li></ul></details>',3)],o={},s=(0,i(7708).A)(o,[["render",function(t,e){return(0,l.uX)(),(0,l.CE)("div",null,a)}]]),r=JSON.parse('{"path":"/zh/guide/java/basice.html","title":"Java基础","lang":"zh-CN","frontmatter":{"title":"Java基础","icon":"fab fa-markdown","order":2,"category":["使用指南"],"tag":["Markdown"],"description":"1.基本类型和包装类型的区别？ 相同点 ：都可以用作变量，无论是方法传递的参数还是成员变量。 不同点 ：一个是基础数据类型，一个是引用数据类型 两者在比较的时候方式不同； 储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）； 所...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/guide/java/basice.html"}],["meta",{"property":"og:site_name","content":"学无止境"}],["meta",{"property":"og:title","content":"Java基础"}],["meta",{"property":"og:description","content":"1.基本类型和包装类型的区别？ 相同点 ：都可以用作变量，无论是方法传递的参数还是成员变量。 不同点 ：一个是基础数据类型，一个是引用数据类型 两者在比较的时候方式不同； 储存方式不同，基本类型一般作为参数和代码块内的局部变量（栈的局部变量表中），如果是成员变量（队），static修饰的（方法区）。引用数据类型（堆），static修饰的（方法区）； 所..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-29T07:25:57.000Z"}],["meta",{"property":"article:author","content":"RenTouZhuNao"}],["meta",{"property":"article:tag","content":"Markdown"}],["meta",{"property":"article:modified_time","content":"2024-03-29T07:25:57.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java基础\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-29T07:25:57.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"RenTouZhuNao\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1711697157000,"updatedTime":1711697157000,"contributors":[{"name":"uhibuka","email":"2580874889@qq.com","commits":1}]},"readingTime":{"minutes":1.86,"words":557},"filePathRelative":"zh/guide/java/basice.md","localizedDate":"2024年3月29日","autoDesc":true}')}}]);